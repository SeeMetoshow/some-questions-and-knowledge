#编码集
早些时候的战争年代, 军队中以摩斯电码的方式传递机密信息. 发送方需要用某些特殊符号(数字等)来表示信息, 
而接收方则需要将收到的特殊符号转化为发送方所要传达的信息, 发送和接受的信息的正确需要双方有共同的密码本.
而在计算机中, 这样的 '密码本' -- 称为编码集.

信息在计算机的最底层是以数字 0、1 的形式存储的,不同的排列组合方式有着不同的含义,这是计算机能区分出不同信息的关键.

了解了这样的背后逻辑, 我们也就知道： 只需要规定一个特定顺序的0、1序列来对应某个字符, 依此类推, 也就能组成一个'密码本', 即编码集.

早期的典型编码集: ASCII码(阿斯kii码)
因为计算机起源发展于英文国家, 最早的编码集的制定和使用也是针对英语国家. 
英文中所需要表示的字符并不多, 仅仅是26个英文字母(包含大小写的话是52个). 
一个字节的长度, 对应 2^8 种状态, 也就能表示256个字符, 用来表示英文绰绰有余.
于是就有了ASCII码, 它用 1 个字节的长度,就能涵盖所有的英文字母(包括大小写)、以及其他的字符. 
-- 注意, ASCII码虽然用了一个字节,但是最高位并没有使用. 也就是说0-127号是有定义的. 128-255号没有定义.--

后来的统一标准的编码集；unicode
它的提出与实施解决了ASCII码造成的历史问题以及一些国家的字符的编码表示数目不够,和国家之间编码标准不一致的问题.
像UTF-8、UTF-16等都是unicode的.

*在实际应用中, 关于编码集的问题:
1.
首先, 英文字符是占一个字节的, 而中文字符是占两个字节的.
在c语言中, char类型占一个字节, 不管使用哪种编码集, 都不能实现向char中存汉字.
在java中, char类型占两个字节, 使用正确的编码集, 是可以实现向char中存汉字的.

2.
在编写好文件, 保存时, 文件以对应编码集的编码格式保存在硬盘中.
而在编译时, 文件根据系统默认编译集的编码方式进行解析.
如果文件编写保存时的编码集和系统解析时的编码集不一致就会出现问题, 因此一定要保持一致.
3.
中文windows系统的默认编码集为ANI(GBK).
