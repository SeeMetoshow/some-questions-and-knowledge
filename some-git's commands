1. git init --初始化, 生成.git文件.
2. git 的基本配置:
   git config --global user.name "xxx" -- 设置用户名, 一定要与github的用户名一致.
   git config --global user.email "xxx@xx.com" -- 设置用户的邮箱, 也是需要与github上的一致.
   git config --list -- 可以查看你的一些配置信息, 主要是为了看自己的用户名以及用户邮箱配置对了没有.
3. 在仓库(目录)中,创建相关文件,并存入到git仓库中:

  背后的逻辑: git 分为: 工作区 - - 进行文件的创建、修改、删除等操作.
                 暂存区 - - 暂存修改或者被操作过的文件.
                 git仓库区 - - 暂存文件进入仓库区,完成了在git仓库的存储.
                 
    存储次序: 工作区 --> 暂存区 --> git仓库区 .
    
    (1) touch test.txt -- 新建一个文件.
    (2) vim test.txt -- 对这个文件进行编辑修改.
    (3) git status -- 查看当前状态.   -这时会显示 有一个test.txt 需要存入暂存区.
    (4) git add test.txt -- 将文件存入暂存区中.
    (5) git status - 这时会显示test.txt已经成功存入到暂存区中了,需要提交(commit)进git中.
    (6) git commit -m "备注内容" -- 表示将文件提交到git 仓库中去,并备注上自己的操作 意欲为何.
    
    关于'备注', 一些值得注意的地方:
    
    修改文件:
             从'创建文件'中的 (2) 开始.
            (2) 对文件进行修改.
            接下来, 与'创建文件'(2)以后的步骤相同.
    删除文件:
             从'创建文件'中的 (1) 开始.
            (1) 中改为 rm test.txt -- 表示删除该文件.
            接下来, 进行'创建文件'中的(4)
            (4) 中改为 git rm test.txt -- 表示暂存区删除该文件
            接着进行'创建文件'中的(6)
            (6) 不用改.        
4. 将本地的代码存放到远端仓库
     背后的逻辑: 之前进行的一系列操作只限于本地, 也就是说我们的代码存放在本地的git库中.而在现实中, 我们往往面对这样的问题: 需要和其他使用计算机的人员对同一个项目进行开发, 
比如说 A 实现一部分功能, B 实现一部分功能等等, 这时就需要有一个远端的仓库, 或者说一个云端的仓库, 多方都可以进行访问和修改.
     
     git clone git://github.com/用户名/仓库名.git -- 将在github上创建的远程仓库'克隆'(clone)到本地.
     接下来我们可以进行一些文件的创建、修改、删除等操作, 这些可参考 3 步骤.
     git push -- 将我们在 本地 对于'克隆'过来的 远程仓库 的修改 推送到 云端, 即对远程仓库进行更新.
     注意: github上要先建立远程仓库,才能 push 成功.
